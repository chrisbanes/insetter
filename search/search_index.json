{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Insetter \u00b6 Insetter is a library to help apps handle WindowInsets more easily. The library contains implementations of many of the concepts described in our \"Listeners to Layouts\" blog post. There are a number of libraries available: Main library \u00b6 The main library provides simple APIs for handling WindowInsets : Kotlin view . applyInsetter { // Apply the navigation bar insets... type ( navigationBars = true ) { // Add to padding on all sides padding () } } Java Insetter . builder () // This will add the navigation bars insets as padding to all sides of the view, // maintaining the original padding (from the layout XML, style, etc) . padding ( WindowInsetsCompat . Type . navigationBars ()) // This is a shortcut for view.setOnApplyWindowInsetsListener(builder.build()) . applyToView ( view ); \ud83d\udcd6 You can read more information here . Data-binding extensions (DBX) \u00b6 A Data Binding extension library, providing Data Binding specific functionality. This primarily contains binding adapters, which allow access to the helper functions from your layouts: <BottomNavigationView android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" android:paddingVertical= \"24dp\" app:paddingBottomSystemWindowInsets= \"@{true}\" app:paddingLeftSystemWindowInsets= \"@{true}\" /> \ud83d\udcd6 You can read more information here . Widgets \u00b6 An extension library which provides versions of commonly used ViewGroups with enhanced inset handling. Currently this library is focusing on building upon ConstraintLayout . A example of a widget is InsetterConstraintLayout , which enables new attributes to define inset behavior on child views: <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <ImageView android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:paddingSystemWindowInsets= \"left|top|right|bottom\" android:src= \"@drawable/rectangle\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> \ud83d\udcd6 You can read more information here . insetter-ktx \u00b6 The old insetter-ktx library has now removed, as all of the KTX functions have been moved to the main library . You can safely remove any references to the insetter-ktx dependency, and replace it with the core library. \u26a0\ufe0f Attention \ud83d\udea7 \u00b6 The library is being written to production quality, but it is not adhering to semantic versioning, mean we may change the API if needed, though we'll try not to. We're using this repository to allow quick and easy prototyping. The contents of this library may eventually be moved into Android Jetpack at a later date. Contributions \u00b6 Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though. License \u00b6 Copyright 2019 Google LLC. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#insetter","text":"Insetter is a library to help apps handle WindowInsets more easily. The library contains implementations of many of the concepts described in our \"Listeners to Layouts\" blog post. There are a number of libraries available:","title":"Insetter"},{"location":"#main-library","text":"The main library provides simple APIs for handling WindowInsets : Kotlin view . applyInsetter { // Apply the navigation bar insets... type ( navigationBars = true ) { // Add to padding on all sides padding () } } Java Insetter . builder () // This will add the navigation bars insets as padding to all sides of the view, // maintaining the original padding (from the layout XML, style, etc) . padding ( WindowInsetsCompat . Type . navigationBars ()) // This is a shortcut for view.setOnApplyWindowInsetsListener(builder.build()) . applyToView ( view ); \ud83d\udcd6 You can read more information here .","title":"Main library"},{"location":"#data-binding-extensions-dbx","text":"A Data Binding extension library, providing Data Binding specific functionality. This primarily contains binding adapters, which allow access to the helper functions from your layouts: <BottomNavigationView android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" android:paddingVertical= \"24dp\" app:paddingBottomSystemWindowInsets= \"@{true}\" app:paddingLeftSystemWindowInsets= \"@{true}\" /> \ud83d\udcd6 You can read more information here .","title":"Data-binding extensions (DBX)"},{"location":"#widgets","text":"An extension library which provides versions of commonly used ViewGroups with enhanced inset handling. Currently this library is focusing on building upon ConstraintLayout . A example of a widget is InsetterConstraintLayout , which enables new attributes to define inset behavior on child views: <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <ImageView android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:paddingSystemWindowInsets= \"left|top|right|bottom\" android:src= \"@drawable/rectangle\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> \ud83d\udcd6 You can read more information here .","title":"Widgets"},{"location":"#insetter-ktx","text":"The old insetter-ktx library has now removed, as all of the KTX functions have been moved to the main library . You can safely remove any references to the insetter-ktx dependency, and replace it with the core library.","title":"insetter-ktx"},{"location":"#attention","text":"The library is being written to production quality, but it is not adhering to semantic versioning, mean we may change the API if needed, though we'll try not to. We're using this repository to allow quick and easy prototyping. The contents of this library may eventually be moved into Android Jetpack at a later date.","title":"\u26a0\ufe0f Attention \ud83d\udea7"},{"location":"#contributions","text":"Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.","title":"Contributions"},{"location":"#license","text":"Copyright 2019 Google LLC. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"contributing/","text":"How to Contribute \u00b6 We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement \u00b6 Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews \u00b6 All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"contributing/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"contributing/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"dbx/","text":"Data-binding extensions (DBX) \u00b6 A Data Binding extension library, providing Data Binding -specific functionality. This primarily contains binding adapters, which allow access to the helper functions from your layouts. Currently the attributes provided are: Warning The future for the DBX library is currently being evaluated. It's unclear how useful it is, and the amount of effort needed to update it to the new WindowInsets types is great. View binding + improvements to the main library mean that it now simple to use the main library only. Applying system window insets \u00b6 The following attributes are useful in being able to apply the system window insets insets, to specific dimensions to views. app:paddingLeftSystemWindowInsets : to apply the left dimension to the view's paddingLeft . app:paddingTopSystemWindowInsets : to apply the top dimension to the view's paddingTop . app:paddingRightSystemWindowInsets : to apply the right dimension to the view's paddingRight . app:paddingBottomSystemWindowInsets : to apply the bottom dimension to the view's paddingBottom . app:layout_marginLeftSystemWindowInsets : to apply the left dimension to the view's layout_marginLeft . app:layout_marginTopSystemWindowInsets : to apply the top dimension to the view's layout_marginTop . app:layout_marginRightSystemWindowInsets : to apply the right dimension to the view's layout_marginRight . app:layout_marginBottomSystemWindowInsets : to apply the bottom dimension to the view's layout_marginBottom . consumeSystemWindowInsets : whether to consume the system window insets. Defaults to false . Applying system gesture insets \u00b6 The following attributes are useful in being able to apply the system gesture insets insets, to specific dimensions to views. app:paddingLeftSystemGestureInsets : to apply the left dimension to the view's paddingLeft . app:paddingTopSystemGestureInsets : to apply the top dimension to the view's paddingTop . app:paddingRightSystemGestureInsets : to apply the right dimension to the view's paddingRight . app:paddingBottomSystemGestureInsets : to apply the bottom dimension to the view's paddingBottom . app:layout_marginLeftSystemGestureInsets : to apply the left dimension to the view's layout_marginLeft . app:layout_marginTopSystemGestureInsets : to apply the top dimension to the view's layout_marginTop . app:layout_marginRightSystemGestureInsets : to apply the right dimension to the view's layout_marginRight . app:layout_marginBottomSystemGestureInsets : to apply the bottom dimension to the view's layout_marginBottom . Using the applying insets attributes \u00b6 Each of the attributes takes a boolean value of whether the attribute functionality is enabled or not, like so: <ImageView app:paddingBottomSystemWindowInsets= \"@{true}\" app:paddingLeftSystemWindowInsets= \"@{true}\" /> You can use any non-exclusive combination of insets and application type, such as the following which uses the bottom system window inset for padding, and the left gesture inset for margin: <ImageView app:paddingBottomSystemWindowInsets= \"@{true}\" app:layout_marginLeftSystemGestureInsets= \"@{true}\" /> Compound padding/margin \u00b6 You can safely set any padding or margins on the view, and the values will be maintained. For example here we're using a padding of 24dp , and also applying the system window insets left and bottom using padding: <ImageView app:paddingLeftSystemWindowInsets= \"@{true}\" app:paddingBottomSystemWindowInsets= \"@{true}\" android:padding= \"24dp\" /> If the bottom system window insets is defined as 48dp on the device, the final applied padding for the view will be: Dimension Layout padding System window insets Final applied padding Left 24dp 0dp 24dp Top 24dp 0dp 24dp (0 + 24) Right 24dp 0dp 24dp Bottom 24dp 48dp 72dp (24 + 48) The same behavior happens when using margin too. Edge-to-edge attributes \u00b6 There is currently just one edge-to-edge attribute: app:layout_edgeToEdge : Set this view's system-ui visibility with the flags required to be laid out 'edge-to-edge', or not. <FrameLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:layout_edgeToEdge= \"@{true}\" > <!-- Yadda yadda --> </FrameLayout> Download \u00b6 Stable Latest version: repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.insetter:insetter-dbx:<latest version>\" } Snapshot Snapshots of the current development version are available, which track the latest commit. The snapshots are deployed to Sonatype's snapshots repository . The latest release is: repositories { // Need to add the Sonatype snapshots repo maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { implementation \"dev.chrisbanes.insetter:insetter-dbx:XXX-SNAPSHOT\" } When should I use this vs the widgets library? \u00b6 The behavior enabled through the widgets library is similar to that provided by the this library, but without the requirement of using data-binding . If you're already using data-binding I recommend using the dbx library and it's binding adapters, since they work with any view type. However, if you do not use data-binding and do not wish to do so, the widgets library provides very similar functionality at the cost of having to migrate to the insetter widget types.","title":"DBX"},{"location":"dbx/#data-binding-extensions-dbx","text":"A Data Binding extension library, providing Data Binding -specific functionality. This primarily contains binding adapters, which allow access to the helper functions from your layouts. Currently the attributes provided are: Warning The future for the DBX library is currently being evaluated. It's unclear how useful it is, and the amount of effort needed to update it to the new WindowInsets types is great. View binding + improvements to the main library mean that it now simple to use the main library only.","title":"Data-binding extensions (DBX)"},{"location":"dbx/#applying-system-window-insets","text":"The following attributes are useful in being able to apply the system window insets insets, to specific dimensions to views. app:paddingLeftSystemWindowInsets : to apply the left dimension to the view's paddingLeft . app:paddingTopSystemWindowInsets : to apply the top dimension to the view's paddingTop . app:paddingRightSystemWindowInsets : to apply the right dimension to the view's paddingRight . app:paddingBottomSystemWindowInsets : to apply the bottom dimension to the view's paddingBottom . app:layout_marginLeftSystemWindowInsets : to apply the left dimension to the view's layout_marginLeft . app:layout_marginTopSystemWindowInsets : to apply the top dimension to the view's layout_marginTop . app:layout_marginRightSystemWindowInsets : to apply the right dimension to the view's layout_marginRight . app:layout_marginBottomSystemWindowInsets : to apply the bottom dimension to the view's layout_marginBottom . consumeSystemWindowInsets : whether to consume the system window insets. Defaults to false .","title":"Applying system window insets"},{"location":"dbx/#applying-system-gesture-insets","text":"The following attributes are useful in being able to apply the system gesture insets insets, to specific dimensions to views. app:paddingLeftSystemGestureInsets : to apply the left dimension to the view's paddingLeft . app:paddingTopSystemGestureInsets : to apply the top dimension to the view's paddingTop . app:paddingRightSystemGestureInsets : to apply the right dimension to the view's paddingRight . app:paddingBottomSystemGestureInsets : to apply the bottom dimension to the view's paddingBottom . app:layout_marginLeftSystemGestureInsets : to apply the left dimension to the view's layout_marginLeft . app:layout_marginTopSystemGestureInsets : to apply the top dimension to the view's layout_marginTop . app:layout_marginRightSystemGestureInsets : to apply the right dimension to the view's layout_marginRight . app:layout_marginBottomSystemGestureInsets : to apply the bottom dimension to the view's layout_marginBottom .","title":"Applying system gesture insets"},{"location":"dbx/#using-the-applying-insets-attributes","text":"Each of the attributes takes a boolean value of whether the attribute functionality is enabled or not, like so: <ImageView app:paddingBottomSystemWindowInsets= \"@{true}\" app:paddingLeftSystemWindowInsets= \"@{true}\" /> You can use any non-exclusive combination of insets and application type, such as the following which uses the bottom system window inset for padding, and the left gesture inset for margin: <ImageView app:paddingBottomSystemWindowInsets= \"@{true}\" app:layout_marginLeftSystemGestureInsets= \"@{true}\" />","title":"Using the applying insets attributes"},{"location":"dbx/#compound-paddingmargin","text":"You can safely set any padding or margins on the view, and the values will be maintained. For example here we're using a padding of 24dp , and also applying the system window insets left and bottom using padding: <ImageView app:paddingLeftSystemWindowInsets= \"@{true}\" app:paddingBottomSystemWindowInsets= \"@{true}\" android:padding= \"24dp\" /> If the bottom system window insets is defined as 48dp on the device, the final applied padding for the view will be: Dimension Layout padding System window insets Final applied padding Left 24dp 0dp 24dp Top 24dp 0dp 24dp (0 + 24) Right 24dp 0dp 24dp Bottom 24dp 48dp 72dp (24 + 48) The same behavior happens when using margin too.","title":"Compound padding/margin"},{"location":"dbx/#edge-to-edge-attributes","text":"There is currently just one edge-to-edge attribute: app:layout_edgeToEdge : Set this view's system-ui visibility with the flags required to be laid out 'edge-to-edge', or not. <FrameLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:layout_edgeToEdge= \"@{true}\" > <!-- Yadda yadda --> </FrameLayout>","title":"Edge-to-edge attributes"},{"location":"dbx/#download","text":"Stable Latest version: repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.insetter:insetter-dbx:<latest version>\" } Snapshot Snapshots of the current development version are available, which track the latest commit. The snapshots are deployed to Sonatype's snapshots repository . The latest release is: repositories { // Need to add the Sonatype snapshots repo maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { implementation \"dev.chrisbanes.insetter:insetter-dbx:XXX-SNAPSHOT\" }","title":"Download"},{"location":"dbx/#when-should-i-use-this-vs-the-widgets-library","text":"The behavior enabled through the widgets library is similar to that provided by the this library, but without the requirement of using data-binding . If you're already using data-binding I recommend using the dbx library and it's binding adapters, since they work with any view type. However, if you do not use data-binding and do not wish to do so, the widgets library provides very similar functionality at the cost of having to migrate to the insetter widget types.","title":"When should I use this vs the widgets library?"},{"location":"library/","text":"Insetter main library \u00b6 The main library provides simple APIs for handling WindowInsets . Builder \u00b6 The Builder is the main entry point for Insetter. It allows you to build up how you want a view to react to WindowInsets : Kotlin Insetter . builder () // This will add the navigation bars insets as padding to all sides of the view, // maintaining the original padding (from the layout XML, style, etc) . padding ( windowInsetTypesOf ( navigationBars = true )) // This will add the status bars insets as margin to all sides of the view, // maintaining the original margins (from the layout XML, etc)` . margin ( windowInsetTypesOf ( statusBars = true )) // This is a shortcut for view.setOnApplyWindowInsetsListener(builder.build()) . applyToView ( view ) Java Insetter . builder () // This will add the navigation bars insets as padding to all sides of the view, // maintaining the original padding (from the layout XML, style, etc) . padding ( WindowInsetsCompat . Type . navigationBars ()) // This will add the status bars insets as margin to all sides of the view, // maintaining the original margins (from the layout XML, etc)` . margin ( WindowInsetsCompat . Type . statusBars ()) // This is a shortcut for view.setOnApplyWindowInsetsListener(builder.build()) . applyToView ( view ); Kotlin DSL \u00b6 If you're using Kotlin, we also provided a DSL via the View.applyInsetter() extension function. To achieve the same result as above: view . applyInsetter { // Apply the navigation bar insets... type ( navigationBars = true ) { // Add to padding on all sides padding () } // Apply the status bar insets... type ( navigationBars = true ) { // Add to margin on all sides margin () } } API docs Download \u00b6 Stable Latest version: repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.insetter:insetter:<latest version>\" } Snapshot Snapshots of the current development version are available, which track the latest commit. The snapshots are deployed to Sonatype's snapshots repository . The latest release is: repositories { // Need to add the Sonatype snapshots repo maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the image above implementation \"dev.chrisbanes.insetter:insetter:XXX-SNAPSHOT\" }","title":"Main library"},{"location":"library/#insetter-main-library","text":"The main library provides simple APIs for handling WindowInsets .","title":"Insetter main library"},{"location":"library/#builder","text":"The Builder is the main entry point for Insetter. It allows you to build up how you want a view to react to WindowInsets : Kotlin Insetter . builder () // This will add the navigation bars insets as padding to all sides of the view, // maintaining the original padding (from the layout XML, style, etc) . padding ( windowInsetTypesOf ( navigationBars = true )) // This will add the status bars insets as margin to all sides of the view, // maintaining the original margins (from the layout XML, etc)` . margin ( windowInsetTypesOf ( statusBars = true )) // This is a shortcut for view.setOnApplyWindowInsetsListener(builder.build()) . applyToView ( view ) Java Insetter . builder () // This will add the navigation bars insets as padding to all sides of the view, // maintaining the original padding (from the layout XML, style, etc) . padding ( WindowInsetsCompat . Type . navigationBars ()) // This will add the status bars insets as margin to all sides of the view, // maintaining the original margins (from the layout XML, etc)` . margin ( WindowInsetsCompat . Type . statusBars ()) // This is a shortcut for view.setOnApplyWindowInsetsListener(builder.build()) . applyToView ( view );","title":"Builder"},{"location":"library/#kotlin-dsl","text":"If you're using Kotlin, we also provided a DSL via the View.applyInsetter() extension function. To achieve the same result as above: view . applyInsetter { // Apply the navigation bar insets... type ( navigationBars = true ) { // Add to padding on all sides padding () } // Apply the status bar insets... type ( navigationBars = true ) { // Add to margin on all sides margin () } } API docs","title":"Kotlin DSL"},{"location":"library/#download","text":"Stable Latest version: repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.insetter:insetter:<latest version>\" } Snapshot Snapshots of the current development version are available, which track the latest commit. The snapshots are deployed to Sonatype's snapshots repository . The latest release is: repositories { // Need to add the Sonatype snapshots repo maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the image above implementation \"dev.chrisbanes.insetter:insetter:XXX-SNAPSHOT\" }","title":"Download"},{"location":"widgets/","text":"Insetter widgets \u00b6 An extension library which provides versions of commonly used ViewGroups with enhanced inset handling. Currently this library is focusing on building upon ConstraintLayout . Warning The future for the widgets library is currently being evaluated. It's unclear how useful it is, and the amount of effort needed to update it to the new WindowInsets types is great. View binding + improvements to the main library mean that it now simple to use the main library only. There are currently two ways to use Insetter with ConstraintLayout : InsetterConstraintLayout which is a subclass, or InsetterConstraintHelper which is a constraint helper. InsetterConstraintLayout \u00b6 InsetterConstraintLayout is a ConstraintLayout which adds support for a number of attributes to define inset behavior on child views. The attributes currently provided are: app:paddingSystemWindowInsets : to apply the system window insets using padding. app:layout_marginSystemWindowInsets : to apply the system window insets using margin. app:paddingSystemGestureInsets : to apply the system gesture insets using padding. app:layout_marginSystemGestureInsets : to apply the system gesture insets using margin. Each of the attributes takes a combination of flags, defining which dimensions the chosen insets should be applied to. An example can be seen below: <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"...\" android:layout_height= \"...\" > <ImageView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:paddingSystemWindowInsets= \"left|top|right|bottom\" android:src= \"@drawable/rectangle\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> Here, the ImageView 's padding on all dimensions will be increased by the system window insets . You can also mix inset types, such as below where the view's padding will be using the left and right system window insets values, and the bottom system gesture insets : <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> <ImageView app:paddingSystemWindowInsets= \"left|right\" app:paddingSystemGestureInsets= \"bottom\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> And similarly, you can mix application types. This time the view's padding will be using the left and right system window insets values, but the view's bottom margin which be using the system gesture insets : <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> <ImageView app:paddingSystemWindowInsets= \"left|right\" app:layout_marginSystemGestureInsets= \"bottom\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> InsetterConstraintHelper \u00b6 Next up we have InsetterConstraintHelper , a constraint helper allowing you to apply inset handling to all of the helper's referenced views. Let's look at an example: <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"...\" android:layout_height= \"...\" > <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintHelper android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:paddingSystemWindowInsets= \"left|top|right|bottom\" app:constraint_referenced_ids= \"image,button\" /> <ImageView android:id= \"@+id/image\" ... /> <Button android:id= \"@+id/button\" ... /> </androidx.constraintlayout.widget.ConstraintLayout> Here you can see that we've defined a InsetterConstraintHelper , setting app:paddingSystemWindowInsets on the helper itself. The defined insets will be applied to all of the views listed in the app:constraint_referenced_ids attribute, in this example @id/image and @id/button . The attributes supported on InsetterConstraintHelper are the same as InsetterConstraintLayout : app:paddingSystemWindowInsets : to apply the system window insets using padding. app:layout_marginSystemWindowInsets : to apply the system window insets using margin. app:paddingSystemGestureInsets : to apply the system gesture insets using padding. app:layout_marginSystemGestureInsets : to apply the system gesture insets using margin. Different flag combinations \u00b6 If you have views which require different flag combinations, you need to define a InsetterConstraintHelper per combination. Lets modify the example above, making @id/image and @id/button use different flags: <androidx.constraintlayout.widget.ConstraintLayout ... > <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintHelper android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:paddingSystemWindowInsets= \"left|right\" app:constraint_referenced_ids= \"image\" /> <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintHelper android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:layout_marginSystemWindowInsets= \"bottom\" app:constraint_referenced_ids= \"button\" /> <ImageView android:id= \"@+id/image\" ... /> <Button android:id= \"@+id/button\" ... /> </androidx.constraintlayout.widget.ConstraintLayout> Thanks to mzgreen for contributing InsetterConstraintHelper. Compound padding/margin \u00b6 For all of the widgets in this library, you can safely set any padding or margins on the view and the values will be maintained. In the example below we're using a padding of 24dp , and also applying the system window insets left and bottom using padding: <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> <ImageView android:padding= \"24dp\" app:paddingSystemWindowInsets= \"left|bottom\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> If the bottom system window insets is defined as 48dp on the device, the final applied padding for the view will be: Dimension Layout padding System window insets Final applied padding Left 24dp 0dp 24dp Top 24dp 0dp 24dp (0 + 24) Right 24dp 0dp 24dp Bottom 24dp 48dp 72dp (24 + 48) The same behavior happens when using margin too. InsetterConstraintLayout vs InsetterConstraintHelper ? \u00b6 We have two things which both provide the same functionality on top of ConstraintLayout , so how do you decide which to use? To help I've listed some of the benefits for each, allowing you to decide: InsetterConstraintLayout benefit #1. The attributes are defined directly on the children, which is clearer when reading the source (for code-review, etc). InsetterConstraintLayout benefit #2. Each view can use a different combination of flags very easily. To achieve the same with InsetterConstraintHelper requires creating a separate InsetterConstraintHelper per flag combination. InsetterConstraintHelper benefit #1. The helper works with any ConstraintLayout class, including MotionLayout. Download \u00b6 Stable Latest version: repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.insetter:insetter-widgets:<latest version>\" } Snapshot Snapshots of the current development version are available, which track the latest commit. The snapshots are deployed to Sonatype's snapshots repository . The latest release is: repositories { // Need to add the Sonatype snapshots repo maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { implementation \"dev.chrisbanes.insetter:insetter-widgets:XXX-SNAPSHOT\" } When should I use this vs the dbx library? \u00b6 The behavior provided by the widgets in this library are designed to be copies of that provided by the insetter-dbx library, but without the requirement of using data-binding . If you're already using data-binding I recommend using the dbx library and it's binding adapters, since they work with any view type. However, if you do not use data-binding and do not wish to do so, the widgets in this library provide very similar functionality at the cost of having to migrate to our widget types.","title":"Widgets"},{"location":"widgets/#insetter-widgets","text":"An extension library which provides versions of commonly used ViewGroups with enhanced inset handling. Currently this library is focusing on building upon ConstraintLayout . Warning The future for the widgets library is currently being evaluated. It's unclear how useful it is, and the amount of effort needed to update it to the new WindowInsets types is great. View binding + improvements to the main library mean that it now simple to use the main library only. There are currently two ways to use Insetter with ConstraintLayout : InsetterConstraintLayout which is a subclass, or InsetterConstraintHelper which is a constraint helper.","title":"Insetter widgets"},{"location":"widgets/#insetterconstraintlayout","text":"InsetterConstraintLayout is a ConstraintLayout which adds support for a number of attributes to define inset behavior on child views. The attributes currently provided are: app:paddingSystemWindowInsets : to apply the system window insets using padding. app:layout_marginSystemWindowInsets : to apply the system window insets using margin. app:paddingSystemGestureInsets : to apply the system gesture insets using padding. app:layout_marginSystemGestureInsets : to apply the system gesture insets using margin. Each of the attributes takes a combination of flags, defining which dimensions the chosen insets should be applied to. An example can be seen below: <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"...\" android:layout_height= \"...\" > <ImageView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:paddingSystemWindowInsets= \"left|top|right|bottom\" android:src= \"@drawable/rectangle\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> Here, the ImageView 's padding on all dimensions will be increased by the system window insets . You can also mix inset types, such as below where the view's padding will be using the left and right system window insets values, and the bottom system gesture insets : <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> <ImageView app:paddingSystemWindowInsets= \"left|right\" app:paddingSystemGestureInsets= \"bottom\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> And similarly, you can mix application types. This time the view's padding will be using the left and right system window insets values, but the view's bottom margin which be using the system gesture insets : <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> <ImageView app:paddingSystemWindowInsets= \"left|right\" app:layout_marginSystemGestureInsets= \"bottom\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout>","title":"InsetterConstraintLayout"},{"location":"widgets/#insetterconstrainthelper","text":"Next up we have InsetterConstraintHelper , a constraint helper allowing you to apply inset handling to all of the helper's referenced views. Let's look at an example: <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"...\" android:layout_height= \"...\" > <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintHelper android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:paddingSystemWindowInsets= \"left|top|right|bottom\" app:constraint_referenced_ids= \"image,button\" /> <ImageView android:id= \"@+id/image\" ... /> <Button android:id= \"@+id/button\" ... /> </androidx.constraintlayout.widget.ConstraintLayout> Here you can see that we've defined a InsetterConstraintHelper , setting app:paddingSystemWindowInsets on the helper itself. The defined insets will be applied to all of the views listed in the app:constraint_referenced_ids attribute, in this example @id/image and @id/button . The attributes supported on InsetterConstraintHelper are the same as InsetterConstraintLayout : app:paddingSystemWindowInsets : to apply the system window insets using padding. app:layout_marginSystemWindowInsets : to apply the system window insets using margin. app:paddingSystemGestureInsets : to apply the system gesture insets using padding. app:layout_marginSystemGestureInsets : to apply the system gesture insets using margin.","title":"InsetterConstraintHelper"},{"location":"widgets/#different-flag-combinations","text":"If you have views which require different flag combinations, you need to define a InsetterConstraintHelper per combination. Lets modify the example above, making @id/image and @id/button use different flags: <androidx.constraintlayout.widget.ConstraintLayout ... > <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintHelper android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:paddingSystemWindowInsets= \"left|right\" app:constraint_referenced_ids= \"image\" /> <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintHelper android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:layout_marginSystemWindowInsets= \"bottom\" app:constraint_referenced_ids= \"button\" /> <ImageView android:id= \"@+id/image\" ... /> <Button android:id= \"@+id/button\" ... /> </androidx.constraintlayout.widget.ConstraintLayout> Thanks to mzgreen for contributing InsetterConstraintHelper.","title":"Different flag combinations"},{"location":"widgets/#compound-paddingmargin","text":"For all of the widgets in this library, you can safely set any padding or margins on the view and the values will be maintained. In the example below we're using a padding of 24dp , and also applying the system window insets left and bottom using padding: <dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> <ImageView android:padding= \"24dp\" app:paddingSystemWindowInsets= \"left|bottom\" /> </dev.chrisbanes.insetter.widgets.constraintlayout.InsetterConstraintLayout> If the bottom system window insets is defined as 48dp on the device, the final applied padding for the view will be: Dimension Layout padding System window insets Final applied padding Left 24dp 0dp 24dp Top 24dp 0dp 24dp (0 + 24) Right 24dp 0dp 24dp Bottom 24dp 48dp 72dp (24 + 48) The same behavior happens when using margin too.","title":"Compound padding/margin"},{"location":"widgets/#insetterconstraintlayout-vs-insetterconstrainthelper","text":"We have two things which both provide the same functionality on top of ConstraintLayout , so how do you decide which to use? To help I've listed some of the benefits for each, allowing you to decide: InsetterConstraintLayout benefit #1. The attributes are defined directly on the children, which is clearer when reading the source (for code-review, etc). InsetterConstraintLayout benefit #2. Each view can use a different combination of flags very easily. To achieve the same with InsetterConstraintHelper requires creating a separate InsetterConstraintHelper per flag combination. InsetterConstraintHelper benefit #1. The helper works with any ConstraintLayout class, including MotionLayout.","title":"InsetterConstraintLayout vs InsetterConstraintHelper?"},{"location":"widgets/#download","text":"Stable Latest version: repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.insetter:insetter-widgets:<latest version>\" } Snapshot Snapshots of the current development version are available, which track the latest commit. The snapshots are deployed to Sonatype's snapshots repository . The latest release is: repositories { // Need to add the Sonatype snapshots repo maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { implementation \"dev.chrisbanes.insetter:insetter-widgets:XXX-SNAPSHOT\" }","title":"Download"},{"location":"widgets/#when-should-i-use-this-vs-the-dbx-library","text":"The behavior provided by the widgets in this library are designed to be copies of that provided by the insetter-dbx library, but without the requirement of using data-binding . If you're already using data-binding I recommend using the dbx library and it's binding adapters, since they work with any view type. However, if you do not use data-binding and do not wish to do so, the widgets in this library provide very similar functionality at the cost of having to migrate to our widget types.","title":"When should I use this vs the dbx library?"}]}