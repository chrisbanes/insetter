/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import dev.chrisbanes.insetter.buildsrc.Libs
import dev.chrisbanes.insetter.buildsrc.Versions

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath Libs.androidGradlePlugin
        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.dokka

        classpath Libs.gradleMavenPublishPlugin

        classpath Libs.Kotlin.binaryCompatibility
    }
}

plugins {
    id "com.diffplug.spotless" version "5.7.0"
}

apply plugin: 'binary-compatibility-validator'
apiValidation {
    // Ignore the sample from API tracking/checking
    ignoredProjects += ["sample", "test-utils"]
}

subprojects {
    repositories {
        google()
        jcenter()
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(Versions.ktlint)
            licenseHeaderFile rootProject.file('spotless/copyright.txt')
        }

        java {
            target "**/*.java"
            googleJavaFormat()
            licenseHeaderFile rootProject.file('spotless/copyright.txt')
        }
        groovyGradle {
            // same as groovy, but for .gradle (defaults to '*.gradle')
            target '**/*.gradle'
            // the Groovy Eclipse formatter extends the Java Eclipse formatter,
            // so it formats Java files by default (unless `excludeJava` is used).
            greclipse().configFile(rootProject.file('spotless/greclipse.properties'))
            licenseHeaderFile rootProject.file('spotless/copyright.txt'),
                    '(buildscript|apply|import)'
        }
    }

    // Read in the signing.properties file if it is exists
    def signingPropsFile = rootProject.file('release/signing.properties')
    if (signingPropsFile.exists()) {
        def localProperties = new Properties()
        signingPropsFile.withInputStream { is -> localProperties.load(is) }
        localProperties.each { prop ->
            if (prop.key == "signing.secretKeyRingFile") {
                // If this is the key ring, treat it as a relative path
                project.ext.set(prop.key, this.rootProject.file(prop.value).absolutePath)
            } else {
                project.ext.set(prop.key, prop.value)
            }
        }
    }
}
